openapi: 3.0.2
info:
  title: Pet SuperApp - OpenAPI 3.0
  description: |-
    This is a Pet SuperApp that enables pet owners to be in control of their pets.
    It allows them to view nearby parks and discuss about them.
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: SuperPetApp Group
    email: tal.benita@s.afeka.ac.il
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 0.1.0
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://parkstore3.swagger.io/api/v1'
tags:
  - name: park
    description: Everything about local parks
  - name: review
    description: Reviews
paths:
  /parks:
    get:
      tags:
        - park
      summary: Get all known parks
      description: Returns a collection of parks
      operationId: getParks
      parameters:
        - in: query
          name: longitude
          description: Local longitude
          schema:
            $ref: '#/components/schemas/Longitude'
        - in: query
          name: latitude
          description: Local latitude
          schema:
            $ref: '#/components/schemas/Latitude'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Park'
        '400':
          description: Bad Request - Invalid parameters
  '/parks/{park}':
    get:
      tags:
        - park
      summary: Find park by ID
      description: Returns a single park
      operationId: getParkById
      parameters:
        - $ref: '#/components/parameters/Park'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Park'
        '400':
          description: Invalid ID supplied
        '404':
          description: Park not found
  '/parks/{park}/images':
    get:
      tags:
        - park
      summary: Get all images of a given park
      description: Returns collection of image URLs
      parameters:
        - $ref: '#/components/parameters/Park'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Invalid ID supplied
        '404':
          description: Park not found
    post:
      tags:
        - park
      summary: Upload an image of the given park
      description: ''
      operationId: addParkImage
      parameters:
        - $ref: '#/components/parameters/Park'
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful operation
      security:
        - jwt: []
  '/parks/{park}/reviews':
    get:
      tags:
        - park
        - review
      summary: Get all reviews for the given park
      description: Returns a collection of reviews
      operationId: getParkReviews
      parameters:
        - $ref: '#/components/parameters/Park'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '400':
          description: Invalid ID supplied
        '404':
          description: Park Not Found
    post:
      tags:
        - park
        - review
      summary: Post a review for this park
      description: ''
      operationId: postParkReview
      parameters:
        - $ref: '#/components/parameters/Park'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: Park Not Found
      security:
        - jwt: []
  '/parks/{park}/reviews/{review}':
    get:
      tags:
        - park
        - review
      summary: Get the given review for the given park
      description: ''
      operationId: getSpecificParkReview
      parameters:
        - $ref: '#/components/parameters/Park'
        - $ref: '#/components/parameters/Review'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid ID supplied
        '404':
          description: Park or Review Not Found
components:
  parameters:
    Park:
      in: path
      name: park
      description: ID of park to update
      required: true
      schema:
        type: integer
        format: int64
    Review:
      in: path
      name: review
      description: ID of the review to retrieve
      required: true
      schema:
        type: integer
        format: int64
  schemas:
    Address:
      type: object
      description: address
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Features:
      type: array
      description: object features
      items:
        type: string
      xml:
        name: Features
    Review:
      required:
        - id
        - rating
      type: object
      description: review
      properties:
        id:
          type: integer
          example: 123
        body:
          type: string
          maxLength: 2000
          example: This park is the best! Enjoyed every moment
        rating:
          type: integer
          minimum: 1
          maximum: 5
    Latitude:
      type: number
      description: latitude
      minimum: -90
      maximum: 90
      example: 34.7818
      format: float
      xml:
        name: Latitude
    Longitude:
      type: number
      description: longitude
      minimum: -180
      maximum: 180
      example: 32.0853
      format: float
      xml:
        name: Longitude
    GeoLocation:
      type: object
      description: geographical coordinates
      properties:
        longitude:
          $ref: '#/components/schemas/Longitude'
        latitude:
          $ref: '#/components/schemas/Latitude'
      xml:
        name: GeoLocation
    DailyOperation:
      type: object
      description: daily operational hours
      properties:
        open:
          type: boolean
        start:
          type: string
          example: '06:00'
        stop:
          type: string
          example: '22:00'
      xml:
        name: DailyOperation
    Park:
      required:
        - id
        - name
        - location
        - photoUrls
        - operationalHours
      type: object
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          example: Veizman Dog-Friendly
        specialization:
          $ref: '#/components/schemas/ParkSpecialization'
        features:
          $ref: '#/components/schemas/Features'
        location:
          required:
            - address
            - geoLocation
          type: object
          properties:
            address:
              $ref: '#/components/schemas/Address'
            geoLocation:
              $ref: '#/components/schemas/GeoLocation'
        operationalHours:
          type: array
          items:
            $ref: '#/components/schemas/DailyOperation'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
      xml:
        name: Park
    ParkSpecialization:
      type: string
      description: park specialization
      enum:
        - Dogs
        - Cats
        - Bunnies
        - Reptiles
      xml:
        name: specialization
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
